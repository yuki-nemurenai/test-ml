name: Ignoring Helper Build & Deploy Dev
 
# Define environment variables
env:
  ARTIFACT_NAME: com.verifika.service.ml.ignoring.helper
  DOCKERFILE_PATH: ignoring-helper/Dockerfile
  DEPLOYMENT_NAME: ml-ignoring-helper
  CONTAINER_NAME: ml-ignoring-helper
  K8S_MANIFEST_DIR: "./ignoring-helper/k8s"
  NAMESPACE: dev
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the develop branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# Cancel running actions if a new commit was added in the current pull request
concurrency:
  group: ${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  verify_changed_files:
    runs-on: ubuntu-latest
    outputs:
      files_changed: ${{ steps.verify-changed-files.outputs.any_changed }}
    steps:
    - name: Prepare files for verification
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Verify Changed files
      uses: tj-actions/changed-files@v38
      id: verify-changed-files
      with:
        files: |
           ignoring-helper/src/*.py
           ignoring-helper/Dockerfile
           ignoring-helper/k8s/dev/*
           ignoring-helper/k8s/stag/*
    - name: List changed files
      if: steps.verify-changed-files.outputs.any_changed == 'true'
      run: |
        echo "List all the files that have changed: ${{ steps.verify-changed-files.outputs.all_changed_files }}"
  build:
    needs: verify_changed_files
    if: needs.verify_changed_files.outputs.files_changed == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: configure kubectl
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DATA }}
      run: |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
          mkdir $HOME/.kube
          echo "$KUBE_CONFIG" > $HOME/.kube/config
    - name: Login to registry
      uses: docker/login-action@v2
      with:
        registry: ${{ secrets.DOCKER_REGISTRY_URL}}
        username: ${{ secrets.DOCKER_REGISTRY_USER }}
        password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }} 
      
    - name: Build the image
      run: docker build . --file $DOCKERFILE_PATH --tag ${{ secrets.DOCKER_REGISTRY_URL }}/$ARTIFACT_NAME:${{ github.run_number }} --tag ${{ secrets.DOCKER_REGISTRY_URL }}/$ARTIFACT_NAME:latest
    - name: Create or check ml-blob PV for dev exists 
      run: kubectl apply -f $K8S_MANIFEST_DIR/dev/pv.yaml
    - name: Create or check ml-blob PV for staging exists
      run: kubectl apply -f $K8S_MANIFEST_DIR/stag/pv.yaml
    - name: Push to registry
      if: github.ref == 'refs/heads/master'
      run: docker push ${{ secrets.DOCKER_REGISTRY_URL }}/$ARTIFACT_NAME:${{ github.run_number }}; docker push ${{ secrets.DOCKER_REGISTRY_URL }}/$ARTIFACT_NAME:latest
    - name: test k8s manifests for DEV
      run: kubectl apply -f $K8S_MANIFEST_DIR/$NAMESPACE -n $NAMESPACE --dry-run=server
    - name: test k8s manifests for STAGING
      run: kubectl apply -f $K8S_MANIFEST_DIR/stag -n staging --dry-run=server 
  deploy: 
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v3
    - name: configure kubectl
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DATA }}
      run: |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl
          mkdir $HOME/.kube
          echo "$KUBE_CONFIG" > $HOME/.kube/config
    - name: deploy to DEV
      if: github.ref == 'refs/heads/master'
      run: |
           kubectl apply -f $K8S_MANIFEST_DIR/$NAMESPACE -n $NAMESPACE; 
           kubectl patch deployment $DEPLOYMENT_NAME -n $NAMESPACE --patch '{"spec": {"template": {"spec": {"containers": [{"name": "${{ env.CONTAINER_NAME }}","env": [{"name": "SENTRY_DSN", "value": "${{ secrets.SENTRY_DSN }}"},{"name": "RELEASE_NUMBER", "value": "${{ github.run_number  }}"},{"name": "ENVIRONMENT", "value": "${{ env.NAMESPACE }}"}],"image": "${{ secrets.DOCKER_REGISTRY_URL }}/${{ env.ARTIFACT_NAME }}:${{ github.run_number }}"}]}}}}'
    - name: Post-deployment steps
      if: github.ref == 'refs/heads/master'
      run: kubectl annotate deployment/$DEPLOYMENT_NAME kubernetes.io/change-cause="github-run-${{ github.run_number }}" -n $NAMESPACE ;
           kubectl describe deployment/$DEPLOYMENT_NAME -n $NAMESPACE;
           kubectl rollout status deployment/$DEPLOYMENT_NAME -n $NAMESPACE
  notification:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Login to registry
      uses: docker/login-action@v2
      with:
        registry: ${{ secrets.DOCKER_REGISTRY_URL}}
        username: ${{ secrets.DOCKER_REGISTRY_USER }}
        password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
    - name: Declare message color for job status
      id: vars
      shell: bash
      run: |
           if [ "${{ job.status }}" == "success" ]; then
              echo "notification_color=#42731d" >> $GITHUB_OUTPUT
           elif [ "${{ job.status }}" == "failure" ]; then
              echo "notification_color=#ff94a4" >> $GITHUB_OUTPUT
           else
              echo "notification_color=#FF8000" >> $GITHUB_OUTPUT
           fi
           
    - name: Create Mattermost Message
      id: create-mattermost-json
      uses: jsdaniell/create-json@v1.2.2
      with:
        name: "mattermost.json"
        json: |
            {
              "username": "GitHub Actions",
              "attachments": [
                {
                  "color": "${{ steps.vars.outputs.notification_color }}",
                  "text": "[${{ job.status }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) deploy ${{ github.event.head_commit.message }} in **workflow:** ${{ github.workflow }}",
                  "footer": "Build run number: ${{ github.run_number }}"
                }
              ],
              "props": {
                "card": "**Repository**: ${{ github.repository }}\n\n**PR-SHA:** ${{ github.event.pull_request.head.sha }}"
              }
            }
    - name: Pull Mattermost and Run Container
      env:
        MATTERMOST_WEBHOOK_URL: ${{ secrets.MATTERMOST_WEBHOOK_URL }}
      run: |
        docker run -e MATTERMOST_WEBHOOK_URL=$MATTERMOST_WEBHOOK_URL -v $(pwd)/mattermost.json:/mattermost.json ${{ secrets.DOCKER_REGISTRY_URL}}/mattermost:20d233875515e56a3177d3d0fa7f7d36dc1fe3f7
